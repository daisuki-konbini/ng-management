/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { CdkConnectedOverlay, CdkOverlayOrigin, ConnectedOverlayPositionChange, ConnectionPositionPair, HorizontalConnectionPos, VerticalConnectionPos } from '@angular/cdk/overlay';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges, TemplateRef } from '@angular/core';
import { CandyDate, CompatibleValue } from 'ng-zorro-antd/core/time';
import { NzSafeAny } from 'ng-zorro-antd/core/types';
import { DateHelperService } from 'ng-zorro-antd/i18n';
import { Subject } from 'rxjs';
import { DatePickerService } from './date-picker.service';
import { DateRangePopupComponent } from './date-range-popup.component';
import { RangePartType } from './standard-types';
import * as ɵngcc0 from '@angular/core';
export declare class NzPickerComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {
    private elementRef;
    private dateHelper;
    private changeDetector;
    datePickerService: DatePickerService;
    noAnimation: boolean;
    isRange: boolean;
    open: boolean | undefined;
    disabled: boolean;
    placeholder: string | string[];
    allowClear: boolean;
    autoFocus: boolean;
    format: string;
    separator: string;
    popupStyle: object;
    dropdownClassName: string;
    suffixIcon: string | TemplateRef<NzSafeAny>;
    readonly focusChange: EventEmitter<boolean>;
    readonly valueChange: EventEmitter<CandyDate | CandyDate[] | null>;
    readonly openChange: EventEmitter<boolean>;
    cdkConnectedOverlay: CdkConnectedOverlay;
    separatorElement: ElementRef;
    pickerInput: ElementRef<HTMLInputElement>;
    rangePickerInputs: QueryList<ElementRef<HTMLInputElement>>;
    panel: DateRangePopupComponent;
    origin: CdkOverlayOrigin;
    document: Document;
    inputSize: number;
    inputWidth: number;
    arrowLeft: number;
    destroy$: Subject<unknown>;
    prefixCls: string;
    inputValue: NzSafeAny;
    activeBarStyle: object;
    animationOpenState: boolean;
    overlayOpen: boolean;
    overlayPositions: ConnectionPositionPair[];
    currentPositionX: HorizontalConnectionPos;
    currentPositionY: VerticalConnectionPos;
    get realOpenState(): boolean;
    constructor(elementRef: ElementRef, dateHelper: DateHelperService, changeDetector: ChangeDetectorRef, datePickerService: DatePickerService, doc: NzSafeAny);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    resetInputWidthAndArrowLeft(): void;
    getInput(partType?: RangePartType): HTMLInputElement;
    focus(): void;
    onFocus(partType?: RangePartType): void;
    onBlur(): void;
    showOverlay(): void;
    hideOverlay(): void;
    showClear(): boolean;
    onClickInputBox(event: MouseEvent, partType?: RangePartType): void;
    onClickBackdrop(): void;
    onOverlayDetach(): void;
    onOverlayKeydown(event: KeyboardEvent): void;
    onPositionChange(position: ConnectedOverlayPositionChange): void;
    onClickClear(event: MouseEvent): void;
    updateInputValue(): void;
    formatValue(value: CandyDate): string;
    onInputKeyup(event: Event, isEnter?: boolean): void;
    private checkValidInputDate;
    getPlaceholder(partType?: RangePartType): string;
    isEmptyValue(value: CompatibleValue): boolean;
    isOpenHandledByUser(): boolean;
    animationStart(): void;
    animationDone(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzPickerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzPickerComponent, "[nz-picker]", ["nzPicker"], { "noAnimation": "noAnimation"; "isRange": "isRange"; "open": "open"; "disabled": "disabled"; "placeholder": "placeholder"; "allowClear": "allowClear"; "autoFocus": "autoFocus"; "format": "format"; "separator": "separator"; "popupStyle": "popupStyle"; "dropdownClassName": "dropdownClassName"; "suffixIcon": "suffixIcon"; }, { "focusChange": "focusChange"; "valueChange": "valueChange"; "openChange": "openChange"; }, ["panel"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwaWNrZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWxpYmFiYS5jb20gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbmltcG9ydCB7IENka0Nvbm5lY3RlZE92ZXJsYXksIENka092ZXJsYXlPcmlnaW4sIENvbm5lY3RlZE92ZXJsYXlQb3NpdGlvbkNoYW5nZSwgQ29ubmVjdGlvblBvc2l0aW9uUGFpciwgSG9yaXpvbnRhbENvbm5lY3Rpb25Qb3MsIFZlcnRpY2FsQ29ubmVjdGlvblBvcyB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFF1ZXJ5TGlzdCwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENhbmR5RGF0ZSwgQ29tcGF0aWJsZVZhbHVlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL3RpbWUnO1xuaW1wb3J0IHsgTnpTYWZlQW55IH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL3R5cGVzJztcbmltcG9ydCB7IERhdGVIZWxwZXJTZXJ2aWNlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9pMThuJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IERhdGVQaWNrZXJTZXJ2aWNlIH0gZnJvbSAnLi9kYXRlLXBpY2tlci5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGVSYW5nZVBvcHVwQ29tcG9uZW50IH0gZnJvbSAnLi9kYXRlLXJhbmdlLXBvcHVwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBSYW5nZVBhcnRUeXBlIH0gZnJvbSAnLi9zdGFuZGFyZC10eXBlcyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOelBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgZWxlbWVudFJlZjtcbiAgICBwcml2YXRlIGRhdGVIZWxwZXI7XG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjtcbiAgICBkYXRlUGlja2VyU2VydmljZTogRGF0ZVBpY2tlclNlcnZpY2U7XG4gICAgbm9BbmltYXRpb246IGJvb2xlYW47XG4gICAgaXNSYW5nZTogYm9vbGVhbjtcbiAgICBvcGVuOiBib29sZWFuIHwgdW5kZWZpbmVkO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICBhbGxvd0NsZWFyOiBib29sZWFuO1xuICAgIGF1dG9Gb2N1czogYm9vbGVhbjtcbiAgICBmb3JtYXQ6IHN0cmluZztcbiAgICBzZXBhcmF0b3I6IHN0cmluZztcbiAgICBwb3B1cFN0eWxlOiBvYmplY3Q7XG4gICAgZHJvcGRvd25DbGFzc05hbWU6IHN0cmluZztcbiAgICBzdWZmaXhJY29uOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxOelNhZmVBbnk+O1xuICAgIHJlYWRvbmx5IGZvY3VzQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gICAgcmVhZG9ubHkgdmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxDYW5keURhdGUgfCBDYW5keURhdGVbXSB8IG51bGw+O1xuICAgIHJlYWRvbmx5IG9wZW5DaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICBjZGtDb25uZWN0ZWRPdmVybGF5OiBDZGtDb25uZWN0ZWRPdmVybGF5O1xuICAgIHNlcGFyYXRvckVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gICAgcGlja2VySW5wdXQ6IEVsZW1lbnRSZWY8SFRNTElucHV0RWxlbWVudD47XG4gICAgcmFuZ2VQaWNrZXJJbnB1dHM6IFF1ZXJ5TGlzdDxFbGVtZW50UmVmPEhUTUxJbnB1dEVsZW1lbnQ+PjtcbiAgICBwYW5lbDogRGF0ZVJhbmdlUG9wdXBDb21wb25lbnQ7XG4gICAgb3JpZ2luOiBDZGtPdmVybGF5T3JpZ2luO1xuICAgIGRvY3VtZW50OiBEb2N1bWVudDtcbiAgICBpbnB1dFNpemU6IG51bWJlcjtcbiAgICBpbnB1dFdpZHRoOiBudW1iZXI7XG4gICAgYXJyb3dMZWZ0OiBudW1iZXI7XG4gICAgZGVzdHJveSQ6IFN1YmplY3Q8dW5rbm93bj47XG4gICAgcHJlZml4Q2xzOiBzdHJpbmc7XG4gICAgaW5wdXRWYWx1ZTogTnpTYWZlQW55O1xuICAgIGFjdGl2ZUJhclN0eWxlOiBvYmplY3Q7XG4gICAgYW5pbWF0aW9uT3BlblN0YXRlOiBib29sZWFuO1xuICAgIG92ZXJsYXlPcGVuOiBib29sZWFuO1xuICAgIG92ZXJsYXlQb3NpdGlvbnM6IENvbm5lY3Rpb25Qb3NpdGlvblBhaXJbXTtcbiAgICBjdXJyZW50UG9zaXRpb25YOiBIb3Jpem9udGFsQ29ubmVjdGlvblBvcztcbiAgICBjdXJyZW50UG9zaXRpb25ZOiBWZXJ0aWNhbENvbm5lY3Rpb25Qb3M7XG4gICAgZ2V0IHJlYWxPcGVuU3RhdGUoKTogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBkYXRlSGVscGVyOiBEYXRlSGVscGVyU2VydmljZSwgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLCBkYXRlUGlja2VyU2VydmljZTogRGF0ZVBpY2tlclNlcnZpY2UsIGRvYzogTnpTYWZlQW55KTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgcmVzZXRJbnB1dFdpZHRoQW5kQXJyb3dMZWZ0KCk6IHZvaWQ7XG4gICAgZ2V0SW5wdXQocGFydFR5cGU/OiBSYW5nZVBhcnRUeXBlKTogSFRNTElucHV0RWxlbWVudDtcbiAgICBmb2N1cygpOiB2b2lkO1xuICAgIG9uRm9jdXMocGFydFR5cGU/OiBSYW5nZVBhcnRUeXBlKTogdm9pZDtcbiAgICBvbkJsdXIoKTogdm9pZDtcbiAgICBzaG93T3ZlcmxheSgpOiB2b2lkO1xuICAgIGhpZGVPdmVybGF5KCk6IHZvaWQ7XG4gICAgc2hvd0NsZWFyKCk6IGJvb2xlYW47XG4gICAgb25DbGlja0lucHV0Qm94KGV2ZW50OiBNb3VzZUV2ZW50LCBwYXJ0VHlwZT86IFJhbmdlUGFydFR5cGUpOiB2b2lkO1xuICAgIG9uQ2xpY2tCYWNrZHJvcCgpOiB2b2lkO1xuICAgIG9uT3ZlcmxheURldGFjaCgpOiB2b2lkO1xuICAgIG9uT3ZlcmxheUtleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIG9uUG9zaXRpb25DaGFuZ2UocG9zaXRpb246IENvbm5lY3RlZE92ZXJsYXlQb3NpdGlvbkNoYW5nZSk6IHZvaWQ7XG4gICAgb25DbGlja0NsZWFyKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICB1cGRhdGVJbnB1dFZhbHVlKCk6IHZvaWQ7XG4gICAgZm9ybWF0VmFsdWUodmFsdWU6IENhbmR5RGF0ZSk6IHN0cmluZztcbiAgICBvbklucHV0S2V5dXAoZXZlbnQ6IEV2ZW50LCBpc0VudGVyPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjaGVja1ZhbGlkSW5wdXREYXRlO1xuICAgIGdldFBsYWNlaG9sZGVyKHBhcnRUeXBlPzogUmFuZ2VQYXJ0VHlwZSk6IHN0cmluZztcbiAgICBpc0VtcHR5VmFsdWUodmFsdWU6IENvbXBhdGlibGVWYWx1ZSk6IGJvb2xlYW47XG4gICAgaXNPcGVuSGFuZGxlZEJ5VXNlcigpOiBib29sZWFuO1xuICAgIGFuaW1hdGlvblN0YXJ0KCk6IHZvaWQ7XG4gICAgYW5pbWF0aW9uRG9uZSgpOiB2b2lkO1xufVxuIl19