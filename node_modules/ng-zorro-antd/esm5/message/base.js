/**
 * @fileoverview added by tsickle
 * Generated from: base.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __assign, __read, __spread } from "tslib";
/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ComponentPortal } from '@angular/cdk/portal';
import { EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
/** @type {?} */
var globalCounter = 0;
/**
 * @abstract
 */
var /**
 * @abstract
 */
NzMNService = /** @class */ (function () {
    function NzMNService(nzSingletonService, overlay, injector) {
        this.nzSingletonService = nzSingletonService;
        this.overlay = overlay;
        this.injector = injector;
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    NzMNService.prototype.remove = /**
     * @param {?=} id
     * @return {?}
     */
    function (id) {
        if (this.container) {
            if (id) {
                this.container.remove(id);
            }
            else {
                this.container.removeAll();
            }
        }
    };
    /**
     * @protected
     * @return {?}
     */
    NzMNService.prototype.getInstanceId = /**
     * @protected
     * @return {?}
     */
    function () {
        return this.componentPrefix + "-" + globalCounter++;
    };
    /**
     * @protected
     * @template T
     * @param {?} ctor
     * @return {?}
     */
    NzMNService.prototype.withContainer = /**
     * @protected
     * @template T
     * @param {?} ctor
     * @return {?}
     */
    function (ctor) {
        /** @type {?} */
        var containerInstance = this.nzSingletonService.getSingletonWithKey(this.componentPrefix);
        if (containerInstance) {
            return (/** @type {?} */ (containerInstance));
        }
        /** @type {?} */
        var overlayRef = this.overlay.create({
            hasBackdrop: false,
            scrollStrategy: this.overlay.scrollStrategies.noop(),
            positionStrategy: this.overlay.position().global()
        });
        /** @type {?} */
        var componentPortal = new ComponentPortal(ctor, null, this.injector);
        /** @type {?} */
        var componentRef = overlayRef.attach(componentPortal);
        /** @type {?} */
        var overlayPane = overlayRef.overlayElement;
        overlayPane.style.zIndex = '1010';
        if (!containerInstance) {
            this.container = containerInstance = componentRef.instance;
            this.nzSingletonService.registerSingletonWithKey(this.componentPrefix, containerInstance);
        }
        return (/** @type {?} */ (containerInstance));
    };
    return NzMNService;
}());
/**
 * @abstract
 */
export { NzMNService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    NzMNService.prototype.componentPrefix;
    /**
     * @type {?}
     * @protected
     */
    NzMNService.prototype.container;
    /**
     * @type {?}
     * @protected
     */
    NzMNService.prototype.nzSingletonService;
    /**
     * @type {?}
     * @protected
     */
    NzMNService.prototype.overlay;
    /**
     * @type {?}
     * @private
     */
    NzMNService.prototype.injector;
}
/**
 * @abstract
 */
var /**
 * @abstract
 */
NzMNContainerComponent = /** @class */ (function () {
    function NzMNContainerComponent(cdr, nzConfigService) {
        this.cdr = cdr;
        this.nzConfigService = nzConfigService;
        this.instances = [];
        this.destroy$ = new Subject();
        this.updateConfig();
    }
    /**
     * @return {?}
     */
    NzMNContainerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.subscribeConfigChange();
    };
    /**
     * @return {?}
     */
    NzMNContainerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    NzMNContainerComponent.prototype.create = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var instance = this.onCreate(data);
        if (this.instances.length >= this.config.nzMaxStack) {
            this.instances = this.instances.slice(1);
        }
        this.instances = __spread(this.instances, [instance]);
        this.readyInstances();
        return instance;
    };
    /**
     * @param {?} id
     * @param {?=} userAction
     * @return {?}
     */
    NzMNContainerComponent.prototype.remove = /**
     * @param {?} id
     * @param {?=} userAction
     * @return {?}
     */
    function (id, userAction) {
        var _this = this;
        if (userAction === void 0) { userAction = false; }
        this.instances.some((/**
         * @param {?} instance
         * @param {?} index
         * @return {?}
         */
        function (instance, index) {
            if (instance.messageId === id) {
                _this.instances.splice(index, 1);
                _this.instances = __spread(_this.instances);
                _this.onRemove(instance, userAction);
                _this.readyInstances();
                return true;
            }
            return false;
        }));
    };
    /**
     * @return {?}
     */
    NzMNContainerComponent.prototype.removeAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.instances.forEach((/**
         * @param {?} i
         * @return {?}
         */
        function (i) { return _this.onRemove(i, false); }));
        this.instances = [];
        this.readyInstances();
    };
    /**
     * @protected
     * @param {?} instance
     * @return {?}
     */
    NzMNContainerComponent.prototype.onCreate = /**
     * @protected
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        instance.options = this.mergeOptions(instance.options);
        instance.onClose = new Subject();
        return (/** @type {?} */ (instance));
    };
    /**
     * @protected
     * @param {?} instance
     * @param {?} userAction
     * @return {?}
     */
    NzMNContainerComponent.prototype.onRemove = /**
     * @protected
     * @param {?} instance
     * @param {?} userAction
     * @return {?}
     */
    function (instance, userAction) {
        instance.onClose.next(userAction);
        instance.onClose.complete();
    };
    /**
     * @protected
     * @return {?}
     */
    NzMNContainerComponent.prototype.readyInstances = /**
     * @protected
     * @return {?}
     */
    function () {
        this.cdr.detectChanges();
    };
    /**
     * @protected
     * @param {?=} options
     * @return {?}
     */
    NzMNContainerComponent.prototype.mergeOptions = /**
     * @protected
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _a = this.config, nzDuration = _a.nzDuration, nzAnimate = _a.nzAnimate, nzPauseOnHover = _a.nzPauseOnHover;
        return __assign({ nzDuration: nzDuration, nzAnimate: nzAnimate, nzPauseOnHover: nzPauseOnHover }, options);
    };
    return NzMNContainerComponent;
}());
/**
 * @abstract
 */
export { NzMNContainerComponent };
if (false) {
    /** @type {?} */
    NzMNContainerComponent.prototype.config;
    /** @type {?} */
    NzMNContainerComponent.prototype.instances;
    /**
     * @type {?}
     * @protected
     */
    NzMNContainerComponent.prototype.destroy$;
    /**
     * @type {?}
     * @protected
     */
    NzMNContainerComponent.prototype.cdr;
    /**
     * @type {?}
     * @protected
     */
    NzMNContainerComponent.prototype.nzConfigService;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    NzMNContainerComponent.prototype.updateConfig = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    NzMNContainerComponent.prototype.subscribeConfigChange = function () { };
}
/**
 * @abstract
 */
var /**
 * @abstract
 */
NzMNComponent = /** @class */ (function () {
    function NzMNComponent(cdr) {
        this.cdr = cdr;
        this.destroyed = new EventEmitter();
        this.eraseTimer = null;
    }
    /**
     * @return {?}
     */
    NzMNComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.options = (/** @type {?} */ (this.instance.options));
        if (this.options.nzAnimate) {
            this.instance.state = 'enter';
        }
        this.autoClose = this.options.nzDuration > 0;
        if (this.autoClose) {
            this.initErase();
            this.startEraseTimeout();
        }
    };
    /**
     * @return {?}
     */
    NzMNComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.autoClose) {
            this.clearEraseTimeout();
        }
    };
    /**
     * @return {?}
     */
    NzMNComponent.prototype.onEnter = /**
     * @return {?}
     */
    function () {
        if (this.autoClose && this.options.nzPauseOnHover) {
            this.clearEraseTimeout();
            this.updateTTL();
        }
    };
    /**
     * @return {?}
     */
    NzMNComponent.prototype.onLeave = /**
     * @return {?}
     */
    function () {
        if (this.autoClose && this.options.nzPauseOnHover) {
            this.startEraseTimeout();
        }
    };
    /**
     * @protected
     * @param {?=} userAction
     * @return {?}
     */
    NzMNComponent.prototype.destroy = /**
     * @protected
     * @param {?=} userAction
     * @return {?}
     */
    function (userAction) {
        var _this = this;
        if (userAction === void 0) { userAction = false; }
        if (this.options.nzAnimate) {
            this.instance.state = 'leave';
            this.cdr.detectChanges();
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.destroyed.next({ id: _this.instance.messageId, userAction: userAction });
            }), 200);
        }
        else {
            this.destroyed.next({ id: this.instance.messageId, userAction: userAction });
        }
    };
    /**
     * @private
     * @return {?}
     */
    NzMNComponent.prototype.initErase = /**
     * @private
     * @return {?}
     */
    function () {
        this.eraseTTL = this.options.nzDuration;
        this.eraseTimingStart = Date.now();
    };
    /**
     * @private
     * @return {?}
     */
    NzMNComponent.prototype.updateTTL = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.autoClose) {
            this.eraseTTL -= Date.now() - this.eraseTimingStart;
        }
    };
    /**
     * @private
     * @return {?}
     */
    NzMNComponent.prototype.startEraseTimeout = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.eraseTTL > 0) {
            this.clearEraseTimeout();
            this.eraseTimer = setTimeout((/**
             * @return {?}
             */
            function () { return _this.destroy(); }), this.eraseTTL);
            this.eraseTimingStart = Date.now();
        }
        else {
            this.destroy();
        }
    };
    /**
     * @private
     * @return {?}
     */
    NzMNComponent.prototype.clearEraseTimeout = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.eraseTimer !== null) {
            clearTimeout(this.eraseTimer);
            this.eraseTimer = null;
        }
    };
    return NzMNComponent;
}());
/**
 * @abstract
 */
export { NzMNComponent };
if (false) {
    /** @type {?} */
    NzMNComponent.prototype.instance;
    /** @type {?} */
    NzMNComponent.prototype.index;
    /** @type {?} */
    NzMNComponent.prototype.destroyed;
    /**
     * @type {?}
     * @protected
     */
    NzMNComponent.prototype.options;
    /**
     * @type {?}
     * @protected
     */
    NzMNComponent.prototype.autoClose;
    /**
     * @type {?}
     * @protected
     */
    NzMNComponent.prototype.eraseTimer;
    /**
     * @type {?}
     * @protected
     */
    NzMNComponent.prototype.eraseTimingStart;
    /**
     * @type {?}
     * @protected
     */
    NzMNComponent.prototype.eraseTTL;
    /**
     * @type {?}
     * @protected
     */
    NzMNComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,